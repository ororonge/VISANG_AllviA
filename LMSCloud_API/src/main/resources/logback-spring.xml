<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="30 seconds">
	
	<springProfile name="dev">
		<property resource="logback-dev.properties" />
	</springProfile>
	<springProfile name="fel40">
		<property resource="logback-fel40.properties" />
	</springProfile>
	<!-- setting -->
	
	<!-- log file path --> 
	<!-- <property name="LOGS_ABSOLUTE_PATH" value="/batch_visangplay_logs/logs" /> -->
	<property name="LOG_PATH" value="${log.config.path}" />	
	<!-- log file name -->
    <property name="LOG_FILE_NAME" value="${log.config.filename}" />	
	<!-- log days -->
    <property name="LOG_DAYS" value="${log.config.days}" />
    <!-- log filesize log-->
    <property name="LOG_FILESIZE_LOG" value="${log.config.filesizelog}" />
	
	<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${LOG_PATH}/${LOG_FILE_NAME}.log</file>
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
		</encoder>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${LOG_PATH}/${LOG_FILE_NAME}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
	        	<maxFileSize>${LOG_FILESIZE_LOG}</maxFileSize>
	        </timeBasedFileNamingAndTriggeringPolicy>
	        <maxHistory>${LOG_DAYS}</maxHistory>
		</rollingPolicy>
		<encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%-5p] [%F]%M\(%L\) : %m%n</pattern>
        </encoder>
	</appender>
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<layout class="ch.qos.logback.classic.PatternLayout">
			<pattern>%d{yyyy-MM-dd HH:mm:ss} %-5level %logger{36} - %msg%n</pattern>
		</layout>
	</appender>
<!-- 	<logger name="java.sql" level="error" />
	<logger name="jdbc.sqlonly" level="debug" />
	<logger name="jdbc.sqltiming" level="off" />
	<logger name="jdbc.audit" level="off" />
	<logger name="jdbc.resultset" level="off" />
	<root level="debug">
		<appender-ref ref="STDOUT" />
		<appender-ref ref="FILE" />
	</root> -->
	
	<logger name="jdbc" level="OFF" /> <!-- SQL문만 로깅, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문 출력 -->
	<logger name="jdbc.sqlonly" level="debug" /> <!-- SQL문과 수행 시간 정보(milliseconds) 포함 -->
	<logger name="jdbc.sqltiming" level="OFF" /> <!-- ResultSet을 제외한 모든 JDBC 호출 정보 로깅. JDBC 문제를 추적해야 할 필요가 있는 경우에만 사용 -->
	<logger name="jdbc.audit" level="OFF" /> <!-- ResultSet을 포함한 모든 JDBC 호출 정보 로깅. 로그양이 많음 -->
	<logger name="jdbc.resultset" level="OFF" /> <!-- SQL 결과를 table 형태로 로깅 -->
	<logger name="jdbc.resultsettable" level="debug" /> <!-- Connection의 연결과 종료에 관련된 로깅. 메모리 누수 확인? -->
	<logger name="jdbc.connection" level="OFF" />
	
	<root level="INFO">
		<appender-ref ref="STDOUT" />
	</root>
	
</configuration>
